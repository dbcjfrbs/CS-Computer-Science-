1. Index 개념
  - db에 방대한 데이터가 들어있을 때 원하는 데이터를 빠르게 찾기 위해 이용하는 오브젝트 또는 방법
  - 인덱스도 객체이기 때문에(mysql에서는 table 내 객체) 저장공간을 차지한다.

2. Index 특징
  - select에만 속도가 빠르고 insert, delete, update의 경우에는 성능이 떨어진다.
    인덱스 테이블은 생성 시 정렬되기 때문에 조회하려는 데이터를 B-tree 방식으로 빠르게 찾아내고 이를 매핑된 원본 테이블로 가서 가져올 수 있다.
    하지만 나머지 기능 사용 시 이미 적재된 데이터의 이동이 발생하며 이것이 인덱스 테이블에서도 중복 처리되어야 하기 때문에 느리다.

2-1. index 알고리즘
  1) Balanced-Tree : 이진탐색, 이진트리 기법을 기반으로 한다.
    - 모든 leaf 노드까지의 높이가 같고(balance를 이룬다) 자식노드가 2개 이상이 될 수 있다.

3. 활용
  - create index [이름] on [테이블 이름(컬럼명1, ...)]
    
4. 종류
  1) clustered index : 데이터와 무리를 이루는 인덱스
    - 테이블 당 하나만 존재하며 pk제약조건으로 컬럼을 생성하면 자동으로 생성된다.
    - 인덱스에 데이터 페이지가 같이 존재한다.
    - 리프페이지와 데이터페이지가 같다.
    - 데이터 페이지에 데이터가 정렬되어 있다.
    - 데이터를 넣을 때 최종적으로 들어간 페이지에서 저장될 공간이 없다면 페이지 분할을 통해 저장공간을 확보한 후 넣는다. -> 삽입 시 성능 떨어진다.
      이때 그 위의 루트 페이지도 꽉 찼다면 루트페이지도 분할이 일어나고 이것의 조상 페이지가 생성되어야 한다.
    - 말단페이지가 아닌 각 페이지는 인덱스와 자식 페이지 주소가 있어 주소 기반으로 내려가서 말단데이터에서 데이터를 찾는다.
    
  2) non-clustered index : 인덱스와 데이터페이지가 따로 존재한다.
    - 보조인덱스로 테이블에 여러 개 존재할 수 있다.
    - 데이터 페이지에 데이터가 정렬되어 있지 않아도 된다. 따라서 clusrtered 보다 부하가 적게 걸리지만 조회 속도가 느리다.
    - 말단페이지에서 데이터가 있는 곳의 주소를 가진다.

* 용어
  - full table scan : 모든 레코드를 전부 조회한다.
