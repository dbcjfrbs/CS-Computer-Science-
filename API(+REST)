Application Programming Interface

1. 개념
- 정보를 주고받는 데 있어서 개발자들 사이에 널리 사용되는 일종의 형식이다.
- 형식이기 때문에 언어, 프레임워크, sw에 구애받지 않고 이 form에 맞춰 기능들을 만들어낼 수 있다.
- TV를 볼 때 리모콘이라는 인터페이스로 소통하는 것처럼 SW프로그램도 그들 사이에 인터페이스할 수 있는 리모콘 같은 애가 필요하다.
- 기상청 서버에 날씨 앱이 정보를 요청하고 받아올 때 A라는 형식으로 요청하면 B라는 형태로 답이 올거라는 공개된 메뉴얼이 있다면
  누구든 이걸 활용해서 기상청 정보를 활용하는 SW를 만들 수 있다.
  이처럼 SW가 SW로부터 지정된 형식으로 요청, 명령을 받을 수 있는 수단을 API라고 부른다.

2. 예
- 네트워크 상에서만 API가 있는 것은 아니다. 로컬 프로그램인 브라우저에서 WEB API를 통해 JS로부터 특정 동작을 지시받는다. 
- 우리가 그냥 될 거라고 생각한 JS로 element를 생성해 웹에 표시하고, event처리를 하는 코드, 논리들이 api를 활용해 지시를 내린 것이다.
- 즉 이 함수를 사용하면 브라우저가 이렇게 해준다는 걸 은연중에 알고 이렇게 코드를 짰고 이들이 api이다.

3. REST API 개념
- 앱과 서버가 있는 웹 통신에서 활용하는 API가 REST형식의 API이다.

4. REST API 특성
- 각 요청이 어떤 동작이나 정보를 위한 것인지 그 요청 모습 자체로 추론이 가능하기 때문에 직관적이다.
- URI에서는 자원을 구조와 함께 나타낼 수 있고 이러한 방식으로 정보를 전달하게 된다.
- 조회 뿐만 아니라 CRUD가 가능하도록 한다.
- 서버에 REST API로 요청을 보낼 때는 HTTP라는 규약에 따라 신호를 전송한다.
- 우체국에서 택배를 보낼 때 다양한 방식이 있듯이 HTTP로 요청을 보낼 때도 여러 메서드가 있다. GET, POST, DELETE, PUT, PATCH
- POST, PUT, PATCH는 BODY라는 주머니가 있어 더 많은 정보를 전달할 수 있다.
- 각 메서드들이 특정 용도에 제한되어 있진 않아서 POST로도 GET, PATCH 등의 작업을 수행할 수 있다.
- 그럼에도 각 요청의 의도를 쉽게 직관적으로 파악하기 위해 RESTFUL하게 API를 만들기 위해서는 목적에 따라 구분해 사용해야 한다.
- 즉 REST API는 요청을 보낼 때 어떤 URI에 어떤 메서드를 사용할지 개발자들 사이에 널리 지켜지는 약속이다.
