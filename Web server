1. 웹 서버 개념
서버는 어떤 컴퓨터로 하여금 서버 역할을 할 수 있도록 해주는 SW를 ~서버라고 부르기도 한다.
웹 서버도 SW의 개념으로 아파치, NginX가 대표적이다.

웹 서버는 웹 사이트를 제공하는 서버로 만들어주는 SW이다.
웹 서버는 HTML, CSS, JS같은 파일들을 서버에서 사용자한테 보내줄 수 있어야 한다.
파일들은 서버컴퓨터 특정 폴더에 저장되어 있다.
이것을 외부에서 접근 가능하도록 개방해서 서버에 지정된 웹사이트 주소로 접근하면 받아갈 수 있도록 한다.
웹 서버 프로그램은 이런 로직을 가능하게 해준다.


2. 웹 서버의 역할 - 정적 콘텐츠 제공
기본적으로 웹 서버는 정적 웹 서버 역할을 한다.
따라서 동적 웹도 웹 서버의 고유 역할로 정의하는 것은 애매하지만 이는 웹 서버 프로그램의 모듈로 할 수 있다.
옛날 방식으로 아파치, PHP, MYSQL을 연동해서 동적인 PHP 웹 사이트를 제공하는 방식이 있다.(APM 방식)
웹 접근이 있을 때마다 PHP에 적힌 코드대로 MYSQL에 있는 데이터를 가져와 아파치가 요리해준다.


3. 웹 서버의 역할 - 동적 콘텐츠 제공을 위한 중간자 역할
반면 식당 매니저 같은 역할로서 있기도 한다. 즉, WAS를 통해 동적 컨텐츠를 제공한다.
client 요청을 WAS에 보내고 WAS가 처리한 결과를 client에 응답한다.


4. WAS 개념
WAS란, DB조회 등 다양한 로직 처리를 요구하는 동적 웹을 제공하기 위해 만들어진 Web Application Server이다.
jsp, servlet, ejs의 구동환경을 제공하며 db접속 기능을 제공한다.
언어마다 was의 역할을 딱 잡아 정의하기 어렵다. ex) 톰캣
node.js의 경우 어플리케이션이 WAS 역할까지 해버린다.


5. 중간자로서 웹 서버의 역할
사실 WAS만으로도 정적 웹, 서비스 제공 역할도 할 수 있지만 웹 서버인 아파치, Nginx가 있는 다양한 기능을 활용하기 위해 같이 사용한다
1) reverse proxy를 통해 유저로부터 서버의 정적 리소스 공간, 동적 요소 공간 등을 감춰 서버 내부적으로 파일 위치, 포트 등을 감춘다.
   즉 응접실같은 곳에 유저를 맞이하고 내부적으로 요리를 꺼내와 전달해주어 보안에 효과적이다.
   (forward proxy : 서버에 방문하는 유저들이 자기들의 ip주소를 감춘다.)
2) 로드밸런싱 : 유저들이 몰릴 때 여러 WAS들에게 분산해서 주문을 넣어주는 역할, 다수의 인스턴스(요리사)로 서비스를 돌리고 웹서버로 이를 밸런싱한다.
3) reverse proxy 캐싱(서버단 캐싱) : 서버로 오는 유저들이 반복적으로 찾을만한 리소스를 응접실에 쌓아두었다가 바로 건내준다.
   (forward proxy 캐싱 : 한 번 받아온 이미지 등 정적 파일이 유저와 서버 사이에 있는 프록시 서버라는 곳에 쌓였다가 다음엔 이곳에서 받아오는 것)
4) 이 외에도 뒷단에 있는 WAS들이 정상동작하는지 주기적으로 체크하는 등 서비스를 안정적으로 돌리기 위해 다양한 기능을 제공한다.


6. 아파치와 Nginx 차이점
아파치 : 다중 프로제스, 컴퓨터 자원을 많이 소모한다.
  - 유저가 올때마다 프로세스를 새로 생성하거나 한 프로세스 안에서 스레드를 새로 생성하는 방식을 이용한다.
  - mpm_prefork : 유저마다 프로세스를 두어 context switching으로 동작한다.
  - mpm_worker : 한 프로세스에서 유저마다 스레드를 생성해서 context swiching하며 동작한다.
  - 다양하고 검증된 기능들을 필요로 하는 데 적합하다.
Nginx : 이벤트 처리
  - event driven : 프로세스 하나만? 두고 유저들을 상대한다. 아파치보다 컴퓨터에 부담이 덜하다
  - 성능과 가벼움을 중요시하는 서비스에 적합하다.
  
  
*요약 : 웹 서버와 WAS가 겹치는 부분이 있지만 각자가 특화된 부분을 활용해,
       보안이나 운영에 특화된 웹서버가 유저를 상대하고 WAS는 뒷단에서 동적요소를 만들어내는 데 집중한다.
       
       
