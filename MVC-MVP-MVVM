1. 배경
  - 동적 웹 만들기에서 PHP안에 데이터, DB연동, HTML 파일 모두 들어가 있어서 큰 프로젝트에서는 복잡해지므로 모듈화가 필요하게 되었다.
  - 이를 위해 MVC라는 접근법이 생겨났다.
  
2. 개념
  - M -> 데이터와 관련된 부분 / V : 나타나는 부분 ex. html, css / C : 제어 부분 ex. js
  - 헌데 이런 구조를 만들어내기가 쉽지 않고, 이런 구조를 프레임워크로서 유저들에게 배포하고 있다. ex. spring, vue...
    언어마다 여러 MVC 웹 프레임워크가 있다. ex) spring, python(MTV), C#(닷넷코어)

3. 닷넷코어 활용
  - controller : 라우팅(어떤 주소로 접속했을 때 어떤 페이지를 보여줄지 설정하는 것)을 마련한다.
  - model : 해당 라우트로 요청이 들어오면 db에서 데이터를 불러와 view에 연결한다.
  - view : 받은 데이터를 통해 동적으로 html을 생성한다.
  
4. MVC-MVP-MVVM 비교
  - MVC : controller가 view, model을 모두 컨트롤한다. 사용자 input도 받아들이고 그 처리도 담당하고 그 결과를 화면에 뿌리는 것도 담당
  - MVP : Presenter가  화면에 어떤 요소가 보여질지만 담당한다. 즉 MVC에서  화면 컨트롤러만 뷰단에 넘긴 것이다.
          버튼 컨트롤러가 뷰에 속한다. 즉 사용자 인풋을 view가 받아준다. 들어온 인풋은 controller에 전달한다.
          화면에 그려야할 요소도 전부 알려준다. view는 멍청하게 명령만 받는다.
          하지만 view마다 presenter를 만들어줘야 하는 생산성 문제가 발생한다.
  - MVVM : ViewModel이 화면을 신경 안쓰고 화면에 보여질 요소만 가지고 있는다.
           모델하고만 통신해서 사용할 데이터를 업데이트해서 가지고 있는다.
           화면을 그리라고 view에 시키지도 않는다.
           뷰가 뷰모델을 항상 지켜보면서 데이터가 바뀌면 가져와 자기가 알아서 그린다.
           인풋도 뷰가 받아 뷰모델에 주면 뷰모델은 역시 데이터만 바꾼다
           
           
