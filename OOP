1. 객체 지향 프로그래밍 개념
  - 이전의 프로그래밍 패러다임은 중심이 컴퓨터에 있었다. 컴퓨터가 사고하는대로 프로그래밍 했다. 
  - 결국엔 사람의 생활에 활용되는 서비스, 앱들을 만들어야 하는 과정에서 인간 친화적인 프로그래밍 방식이 필요하게 됐습니다.
  - 인간, 사물 등의 현실 세계를 반영하는 관점에서 프로그래밍하는 것이 OOP이다.
  - 현실 세계의 것들을 객체라는 개념으로 보고 그 객체로부터 필요한 특징들을 뽑아와 개발하려는 APP에 프로그래밍 하는 것이다.(추상화)

2. 예시
하려는 일 : 학교 대청소(창문, 바닥, 칠판 닦기)를 각 학생을 통해 수행한다.
  - 1) 노가다로 하나하나 지시문을 작성해 명령 수행
  - 2) 반복문으로 작성량을 줄여 명령 수행
  - 3) 함수로 청소 로직을 정의해두고, 이를 호출해 작성문 줄인다.
  -----------------여기까지는 절차적 프로그래밍에서 가능함 ---------------------
  - 4) Class라는 걸 생성해서 함수처럼 청소로직을 메서드로 정의하고, 추가적으로 청소로직 수행 시 기본적으로 갖춰지는 변수값들을 초기화한다.
       이를 활용할 때는 class를 기반으로 객체라는 것을 생성하고, 객체 메서드를 적용하면 된다.
  - 5) 추가적으로 해당 객체를 원소로 가지는 배열을 생성해 각 객체를 넣고 반복문을 통해 코드를 더 간단히 한다.
       
    즉 이러한 객체는 데이터, 기능이 캡슐화된 묶음을 말한다.
    이를 통해 프로그래머는 원하는 기능을 수행하기 위해 이미 정의된 class를 가져다가 사용할 수 있으며 이때 어떻게 구현되어 있는지 알 필요없이
    그냥 외부에서 조작할 수 있는 명령어인 메서드만 사용해 제공되는 기능을 사용할 수 있게 된다.
    
  - 6) 칠판닦기, 바닥쓸기, 창문닦기 클래스의 인스턴스들이 각자의 메서드로 청소를 했던 것을
       이제는 Interface를 사용해 이 클래스들을 하나의 묶음에 넣어 한번에 명령 처리를 할 수 있다.
       이때 인터페이스가 적용되지 않는 서로 다른 클래스에 있는 같은 이름의 메서드는 하나로 묶어 사용할 수 없다.
       
  - 7) 클래스로 더 큰 클래스를 만들어서 반 전체로서 명령을 수행할 수 있다.  
       학생 단위로 일을 시키다가 교실 단위로 명령을 수행할 수 있게 된다.
       
  - 8) 만약 기존 교실청소팀이 아닌 실험실청소팀이 필요할 때 새로 정의할 수도 있지만 중복되는 내용이 많을 것이기에
       OOP의 상속 특성을 활용해 extend, super, @override를 코드를 활용해 간단히 정의할 수 있다.
  
   -9) 아까 인터페이스를 적용해 서로다른 클래스를 묶어주었던 것을, 추상 클래스를 부모로 두어 상속받아 해결해줄 수 있다.
       구현은 interface와 마찬가지로 해주지만 추상 클래스 형태로 정의하면 된다.
       그럼에도 interface가 활용될 수 있다면 추상클래스의 트리구조 상속관계가 아닌 트리 구조를 형성치 않는 클래스들을 묶어줄 수 있다.
       상속은 물려받는 것, 인터페이스는 장착하는 거라고 생각하면 쉽다.
       
    OOP는 프로그래밍 방법론이기 때문에 OOP 언어에서만 OOP를 활용할 수 있는 건 아니고, 다만 이를 구현하기 쉽게 만들어진 언어인 것이다.
    (그래서 함수형에서도 OOP를 활용할 수 있긴 하다.)
