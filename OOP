1. 객체 지향 프로그래밍 개념
  - 이전의 프로그래밍 패러다임은 중심이 컴퓨터에 있었다. 컴퓨터가 사고하는대로 프로그래밍 했다. 
  - 결국엔 사람의 생활에 활용되는 서비스, 앱들을 만들어야 하는 과정에서 인간 친화적인 프로그래밍 방식이 필요하게 됐습니다.
  - 인간, 사물 등의 현실 세계를 반영하는 관점에서 프로그래밍하는 것이 OOP이다.
  - 현실 세계의 것들을 객체라는 개념으로 보고 그 객체로부터 필요한 특징들을 뽑아와 개발하려는 APP에 프로그래밍 하는 것이다.(추상화)

2. 예시
하려는 일 : 학교 대청소(창문, 바닥, 칠판 닦기)를 각 학생을 통해 수행한다.
  - 1) 노가다로 하나하나 지시문을 작성해 명령 수행
  - 2) 반복문으로 작성량을 줄여 명령 수행
  - 3) 함수로 청소 로직을 정의해두고, 이를 호출해 작성문 줄인다.
  -----------------여기까지는 절차적 프로그래밍에서 가능함 ---------------------
  - 4) Class라는 걸 생성해서 함수처럼 청소로직을 메서드로 정의하고, 추가적으로 청소로직 수행 시 기본적으로 갖춰지는 변수값들을 초기화한다.
       이를 활용할 때는 class를 기반으로 객체라는 것을 생성하고, 객체 메서드를 적용하면 된다.
  - 5) 추가적으로 해당 객체를 원소로 가지는 배열을 생성해 각 객체를 넣고 반복문을 통해 코드를 더 간단히 한다.
       
  - 즉 이러한 객체는 데이터, 기능이 캡슐화된 묶음을 말한다.
    이를 통해 프로그래머는 원하는 기능을 수행하기 위해 이미 정의된 class를 가져다가 사용할 수 있으며 이때 어떻게 구현되어 있는지 알 필요가 없다.
    
  -6) 
  












또한 내부적으로 어떻게 동작하는지 몰라도 개발자는 라이브러리가 제공하는 기능들을 사용할 수 있기 때문에 생산성이 높아지게 된다.

OOP 로 코드를 작성하면 이미 작성한 코드에 대한 재사용성이 높다. 자주 사용되는 로직을 라이브러리로 만들어두면 계속해서 사용할 수 있으며 
그 신뢰성을 확보 할 수 있다.

