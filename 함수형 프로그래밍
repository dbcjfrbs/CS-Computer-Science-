1. 개념
- 변하지 않는 값과 함수로 이루어져 있다.
- 함수에 입력되는 파라미터로만 동작한다.(순수함수)
- 함수 외부의 값이나 함수내부에서 임의로 타 객체를 수정하는 것이 금지된다.
- 기존 객체 내부에 담긴 값을 변경하지 않고 함수 내부에서 새로운 객체를 만들어 반환하는 방법을 사용한다.

2. 중요 특징
- 선언형 프로그래밍이다. OOP는 명령형 프로그래밍이다.
  받아오는 인자들의 흐름을 스트림으로 본다면 스트림을 통해 제공되는 함수형 메서드를 통해 데이터를 변경시키지 않고 프로그래밍한다.
- 함수를 일급객체로서 다룬다.
- 함수 내부에서 값을 사용할 수 없다. 즉 받은 파라미터를 활용한 기능만 허용된다.
- 이러한 일급객체를 사용할 수 있는 함수를 고차함수라고 부른다.
  *고차함수 : 인자로 다른 함수를 받아 결과를 반환해주는 함수(콜백함수의 하위개념?), 또한 다른 함수를 반환하는 함수도 고계함수에 속함

- 함수형과 객체형을 병용하여 사용하기도 한다.
  순수하게 함수형 언어로만 구성하게 되면 값을 변경할 때마다 새로운 객체를 생성하기 때문에 oop보다 속도가 느리게 된다.
  함수형 언어를 병용가능한 주요 언어 예 : c++, java, c#

요약 : immutable, 일급시민, 반응형(선언형) 프로그래밍

2-1. 서브 특징
  1) 커링 : 여러 인자를 받는 함수에 일부 인자를 널어 나머지 인자를 받는 다른 함수를 만들어낼 수 있는 함수형 프로그래밍의 기법
    - 함수형 언어 중 대표적으로 scala로 이를 사용할 수 있다.
    - js로도 화살표 함수를 사용하면 스칼라만큼은 아니어도 보다 간결하게 표현된다.
    - 인자들이 모두 준비되지 않았을 때 부분적용된 함수를 만들어서 마련해두거나 다른 함수의 인자로 넘겨주는 용도로 사용가능하다.
      예시) add(2, 3) -> add_curry(2)(3) / add(2)=add_curry(2)(_)
    - 이를 통해 로직을 짜는 방식이 좀 더 풍성하고 편리해진다.
  
  2) 함수 컴비네이션
    - 리스트(컬렉션) 내부 요소를 다양하게 연속적으로 처리할 수 있게 해주는 js에서 배웠던 filter, reduce, forEtch 같은 메서드가 있다.
    - 많은 언어에 확장 적용되고 있는 추세이다.


3. 절차, 객체 지향 프로그래밍과의 차이점 및 도입 배경
예) 소를 키우는 농장에 소가 들어오면 카운팅하고 있는데 다른 동물 말, 돼지가 들어오게 된다면?
  - 절차지향 언어에서는 동물이 추가될 때마다 count변수, add함수의 중복을 피하기 위해 naming이 복잡해져 오류발생율이 높아짐
  - 객체지향 언어에서는 각 동물마다의 농장(클래스)를 두어 같은 기능의 변수, 함수를 각 농장에서 사용할 수 있게 된다.
  
  - 함수형 언어에서는 소 농장 객체를 생성할 때 1마리의 고정 값을 받아 생성한다.
    2마리가 추가되면 add(2) 메서드를 통해 return new Farm(count+2) 로 새로운 농장(객체)를 생성하여 반환한다.
    이렇게 객체 내부에서 상태가 변하는 변수를 제거하면 변수 하나를 여러 루틴에서 수정할 때 발생하는 오류를 막을 수 있다. ex) 버튼
  
