1. 동기와 비동기의 차이
  - 동기 : 코드가 반드시 작성된 순서대로 실행된다고 생각하면 된다.
  - 비동기 : 한줄한줄 순서대로 출력되지 않는 코드로 생각하면 된다.

2. 비동기 원리
  - 쓰레드나 프로세스를 통해 여럿이 병렬적으로 돌고 있다는 말이다.
    즉 필요에 따라 수행되고 있는 코드 a가 시간이 걸리면 뒷단 코드 b를 병렬적으로 다른 쓰레드나 프로세스를 통해 돌린다.
  
3. js(싱글쓰레드 환경)에서의 비동기
  * 맛있는 녀석들 멤버(객체)가 for문 순회를 하며 서버에서 응답받는대로 식사완료를 출력하는 코드가 있을 때 그 순서가 무작위로 출력되는 이유는?
    - js는 js엔진에서 실행되는데 이때 하나의 쓰레드에서 실행되게 된다. -> 싱글쓰레드 환경
    - js 런타임 환경에는 js엔진과 함께 web api도 함께 동작한다. 
    - web api에서는 타이머 동작, ajax를 통한 http 요청, 파일에서 데이터 읽어오기 등의 시간을 소요하는 동작을 수행한다.
     
    1) 여러 테스크(수행 단위) 중 web api와 관련되지 않은 기본적인 처리는 js 싱글 쓰레드 영역에서 동기적으로 처리된다.
       테스크 중 web api와 관련된 비동기 작업을 만나게 되면 이는 비동기 작업 루트를 따르며, 이러한 루트는 한번에 여러 개가 생성될 수 있다.
    2) 비동기 작업은 보통 콜백함수를 가지는데 시간이 걸리는 작업을 마치면 반환된 콜백함수가 도착한대로 테스트 큐라는 하나의 선로에 넣어진다.
       이때 도착순서는 비동기 작업 루트에 넣어진 순서대로 보장되지 않는다. 랜덤하다.
    3) 비동기작업이나 클릭(사용자 입력)으로부터 테스트 큐에 무작위로 들어온 콜백함수들은 이벤트루프를 통해 순서대로 기존 js 싱글쓰레드로 넘어가 작업을 끝마친다.
    
    이러한 작업을 통해 시간이 걸리는 업무들은 비동기적인 루트들로 빼돌려 총 작업소요시간을 줄일 수 있게 된다.

4. 비동기를 활용한 동기 작업
  - 여러 비동기 작업이 순서대로 이전 결과값을 받아 이뤄져야 할 경우에 async-await 방식을 활용해 이를 처리할 수 있다.
  
   
